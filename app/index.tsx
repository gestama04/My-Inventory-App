import { useEffect, useState } from 'react';
import { useRouter } from 'expo-router';
import { useAuth } from '../auth-context';
import AsyncStorage from '@react-native-async-storage/async-storage';
import WelcomeScreen from './welcome';
import InitialSetupScreen from './setup';
import { View, ActivityIndicator } from 'react-native';

export default function Index() {
  console.log('üöÄ INDEX.TSX RENDERIZADO!');
  
  const { currentUser, loading } = useAuth();
  const router = useRouter();
  const [showWelcome, setShowWelcome] = useState<boolean | null>(null);
  const [showInitialSetup, setShowInitialSetup] = useState<boolean | null>(null);
  const [isProcessing, setIsProcessing] = useState(true);

  console.log('üîç Estados atuais:', {
    currentUser: !!currentUser,
    loading,
    showWelcome,
    showInitialSetup,
    isProcessing
  });

  // 1Ô∏è‚É£ Handler para quando termina o Welcome (primeira vez na app)
  const handleWelcomeContinue = async () => {
    console.log('üìù Welcome conclu√≠do - indo para login');
    try {
      await AsyncStorage.setItem('hasSeenWelcome', 'true');
      setShowWelcome(false);
      setIsProcessing(false);
      // Sempre vai para login ap√≥s o welcome
      router.replace('/login' as any);
    } catch (error) {
      console.error('Erro ao salvar welcome:', error);
      router.replace('/login' as any);
    }
  };

  // 2Ô∏è‚É£ Handler para quando termina o Setup (primeira vez ap√≥s login)
  const handleSetupComplete = async () => {
    console.log('üìù Setup conclu√≠do - indo para home');
    try {
      if (currentUser) {
        await AsyncStorage.setItem(`hasCompletedSetup_${currentUser.uid}`, 'true');
        console.log(`‚úÖ Setup marcado como completo para ${currentUser.uid}`);
      }
      setShowInitialSetup(false);
      setIsProcessing(false);
      router.replace('/home' as any);
    } catch (error) {
      console.error('Erro ao salvar setup:', error);
      router.replace('/home' as any);
    }
  };

  // 3Ô∏è‚É£ L√≥gica principal de navega√ß√£o
  useEffect(() => {
    const determineNavigation = async () => {
      console.log('üîÑ === DETERMINANDO NAVEGA√á√ÉO ===');
      
      // Aguardar autentica√ß√£o terminar
      if (loading) {
        console.log('‚è≥ Aguardando autentica√ß√£o...');
        return;
      }

      setIsProcessing(true);

      try {
        // PASSO 1: Verificar se √© a primeira vez na app
        const hasSeenWelcome = await AsyncStorage.getItem('hasSeenWelcome');
        console.log('üëã Primeira vez na app?', !hasSeenWelcome);
        
        if (!hasSeenWelcome) {
          console.log('üéØ MOSTRAR WELCOME (primeira vez)');
          setShowWelcome(true);
          setShowInitialSetup(false);
          setIsProcessing(false);
          return;
        }

        // PASSO 2: Se j√° viu welcome mas n√£o est√° logado ‚Üí Login
        if (!currentUser) {
          console.log('üéØ IR PARA LOGIN (n√£o autenticado)');
          setShowWelcome(false);
          setShowInitialSetup(false);
          setIsProcessing(false);
          router.replace('/login' as any);
          return;
        }

        // PASSO 3: Se est√° logado, verificar se j√° fez setup
        const setupKey = `hasCompletedSetup_${currentUser.uid}`;
        const hasCompletedSetup = await AsyncStorage.getItem(setupKey);
        console.log('üîß J√° fez setup?', !!hasCompletedSetup, 'para user:', currentUser.uid);

        if (!hasCompletedSetup) {
          console.log('üéØ MOSTRAR SETUP (primeira vez ap√≥s login)');
          setShowWelcome(false);
          setShowInitialSetup(true);
          setIsProcessing(false);
          return;
        }

        // PASSO 4: Tudo feito ‚Üí Home
        console.log('üéØ IR PARA HOME (tudo configurado)');
        setShowWelcome(false);
        setShowInitialSetup(false);
        setIsProcessing(false);
        router.replace('/home' as any);

      } catch (error) {
        console.error('‚ùå Erro na navega√ß√£o:', error);
        // Em caso de erro, ir para login
        setShowWelcome(false);
        setShowInitialSetup(false);
        setIsProcessing(false);
        router.replace('/login' as any);
      }
    };

    determineNavigation();
  }, [currentUser, loading]); // S√≥ reexecuta quando user ou loading mudam

  // 4Ô∏è‚É£ Renderiza√ß√£o baseada no estado
  console.log('üé® Renderizando baseado em:', { showWelcome, showInitialSetup, isProcessing });

  // Welcome Screen (primeira vez na app)
  if (showWelcome === true) {
    console.log('üé® ‚Üí WELCOME SCREEN');
    return <WelcomeScreen onContinue={handleWelcomeContinue} />;
  }

  // Setup Screen (primeira vez ap√≥s login)
  if (currentUser && showInitialSetup === true) {
    console.log('üé® ‚Üí SETUP SCREEN');
    return <InitialSetupScreen onComplete={handleSetupComplete} />;
  }

  // Loading (enquanto processa ou aguarda)
  if (loading || isProcessing || showWelcome === null || showInitialSetup === null) {
    console.log('üé® ‚Üí LOADING');
    return (
      <View style={{
        flex: 1,
        justifyContent: 'center',
        alignItems: 'center',
        backgroundColor: '#3498db'
      }}>
        <ActivityIndicator size="large" color="#FFFFFF" />
      </View>
    );
  }

  // Fallback (n√£o deveria acontecer)
  console.log('üé® ‚Üí FALLBACK LOADING');
  return (
    <View style={{
      flex: 1,
      justifyContent: 'center',
      alignItems: 'center',
      backgroundColor: '#3498db'
    }}>
      <ActivityIndicator size="large" color="#FFFFFF" />
    </View>
  );
}
